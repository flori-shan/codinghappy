plugins {
    id 'java'
    id 'idea'
}

group 'cn.nihility'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    mavenCentral()
}

idea {
    module {
        downloadJavadoc = true  // defaults to false
        downloadSources = true
    }
}

/* 不能有横线 */
project.ext {
    logbackVersion = '1.2.3'
    junitVersion = '4.12'
    rabbitmqVersion = '5.6.0'
    jedisVersion = '3.0.1'
    springVersion = '4.3.24.RELEASE'
    mysqlVersion = '8.0.13'
    HikariCPVersion = '3.3.1'
    c3p0Version = '0.9.1.2'
    druidVersion = '1.1.12'
    mybatisVersion = '3.4.6'
}

/* Gradle 指定编码 */
tasks.withType(JavaCompile) { options.encoding = "UTF-8" }
/* 或者 -Dfile.encoding=UTF-8 */

dependencies {
    /* log4j2 and log4j to slf4j */
    compile 'org.apache.logging.log4j:log4j-core:2.11.1' /* log4j2 */
    compile 'log4j:log4j:1.2.17' /* log4j */
    compile 'org.slf4j:log4j-over-slf4j:1.7.25' /* log4j to slf4j */
    compile 'org.apache.logging.log4j:log4j-to-slf4j:2.11.1' /* log4j2 to slf4j */
    compile 'org.slf4j:jcl-over-slf4j:1.7.25' /* JCL to slf4j */
    compile "ch.qos.logback:logback-classic:$logbackVersion"

    testCompile group: 'junit', name: 'junit', version: "$junitVersion"

    /* Spring  exclude : commons-logging:commons-logging:1.2 */
    compile ("org.springframework:spring-core:$springVersion") {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
    compile "org.springframework:spring-beans:$springVersion"
    compile "org.springframework:spring-context:$springVersion"
    compile "org.springframework:spring-context-support:$springVersion"
    /*compile "org.springframework:spring-expression:$springVersion"*/
    /*compile "org.springframework:spring-aop:$springVersion"*/
    compile "org.springframework:spring-aspects:$springVersion"
    compile "org.springframework:spring-instrument:$springVersion"
    compile "org.springframework:spring-messaging:$springVersion"
    compile "org.springframework:spring-jdbc:$springVersion"
    /*compile "org.springframework:spring-tx:$springVersion"*/
    compile "org.springframework:spring-orm:$springVersion"
    compile "org.springframework:spring-oxm:$springVersion"
    compile "org.springframework:spring-test:$springVersion"
    compile "org.springframework:spring-web:$springVersion"
    compile "org.springframework:spring-webmvc:$springVersion"
    compile "org.springframework:spring-websocket:$springVersion"

    /* mysql */
    compile "mysql:mysql-connector-java:$mysqlVersion"
    /* database pool */
    compile "com.zaxxer:HikariCP:$HikariCPVersion"
    compile "c3p0:c3p0:$c3p0Version"
    compile "com.alibaba:druid:$druidVersion"

    /* mybatis */
    compile "org.mybatis:mybatis:$mybatisVersion"
    compile group: 'org.ehcache', name: 'ehcache', version: '3.7.0'

    compile group: 'redis.clients', name: 'jedis', version: '3.0.1'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    compile group: 'com.alibaba', name: 'fastjson', version: '1.2.54'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.8'
    compile group: 'org.json', name: 'json', version: '20180813'

    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'

}

jar {
    /* gradle jar -Pmainclass=cn.nihility.util.LogbackUtil */
    def mainclass = project.hasProperty("mainclass") ? project.property("mainclass") : ""
    // def gitversion = 'git rev-parse --short HEAD'.execute().text.trim()
    manifestContentCharset 'UTF-8'
    metadataCharset 'UTF-8'

    manifest {
        attributes 'Implementation-Title': 'Project Gradle Quickstart',
                'Implementation-Version': version,
                'Main-Class': "$mainclass"
    }

    /* 这个不可以放到 allprojects 当中，不然会出现 class 重复，应该放到每个独立的 project 当中*/
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        /*configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }*/
    }

    exclude 'META-INF/NOTICE*', 'META-INF/DEPENDENCIES', 'META-INF/LICENSE*', '*.dtd', '*.xsd', '*.properties', '*.xml'
    exclude('META-INF/maven/', 'META-INF/org/', 'META-INF/services/', 'META-INF/versions/')

    /* 1. gradle jar -PallInOne  根据参数来决定是否将第三方依赖类打入自己的jar包
     if (project.hasProperty("allInOne")) {from {configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }}}
      2. 另一种把依赖放到 lib 里面
     into('lib') { from configurations.runtime } */
}